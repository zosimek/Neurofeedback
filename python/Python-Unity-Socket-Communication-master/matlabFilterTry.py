from scipy.signal import filtfilt
from numpy.fft import fft
import numpy
import matplotlib.pyplot as plt

########################## Dunno why but it imports the data incorrectly ###############################################
# import pandas
#
# excel_data = pandas.read_excel('matlabFilter.xlsx', sheet_name='Sheet1', dtype=float)
# row1 = excel_data.columns.ravel()
# print(excel_data)

########################################################################################################################

# # removing the new line characters ---> .rstrip()
# with open('filterVertical.txt') as f:
#      lines = [float(line.rstrip())for line in f]
#
# print(lines)

########################################################################################################################

T = 1
fs = 500

nsamples = T * fs
t = numpy.arange(0, nsamples) / fs
a = 0.02
mean = 0
std = 1

# white noise
samples = numpy.random.normal(mean, std, size=nsamples)


with open('filterVertical.txt') as f:
     filter = [float(line.rstrip())for line in f]
# filter = [-0.000883409403944260, -0.000719025526958223, -0.000812466880423842, -0.000736064282455291, -0.000451163152299852, 3.66604912860497e-05, 0.000667047405110743,0.00132796367726536, 0.00187397061448153, 0.00216001102091789, 0.00207436050054433, 0.00158083238802428, 0.000735682823690446, -0.000307345326842995, -0.00132231893931153, -0.00205766058946591, -0.00229603863662214, -0.00191610032048575, -0.000937462997483424, 0.000465019738455002, 0.00198390865489729, 0.00324152388344852, 0.00387715551482204, 0.00364239734806314, 0.00248021246973904, 0.000563855222214475, -0.00171725839008339, -0.00383049307809523, -0.00521838363718635, -0.00543835511819774, -0.00429046739345002, -0.00189845177221457, 0.00128206905794384, 0.00453841009377828, 0.00705099076047847, 0.00808761405725037, 0.00720023204388804, 0.00437279979781281, 7.86933489181157e-05, -0.00477813455306256, -0.00903670392772155, -0.0115379271011759, -0.0114141940422433, -0.00834326582782533, -0.00269875179622970, 0.00444966461036306, 0.0115057291633226, 0.0166641024570767, 0.0183193119567121, 0.0154810723410739, 0.00810186019883348, -0.00276736988998017, -0.0150455694783870, -0.0259229323001955, -0.0323516549681369, -0.0316403844323702, -0.0220357926661759, -0.00317092609044664, 0.0237208990697444, 0.0558847837772758, 0.0894168294498283, 0.119872302808509, 0.143001850222020, 0.155478630266847, 0.155478630266847, 0.143001850222020, 0.119872302808509, 0.0894168294498283, 0.0558847837772758, 0.0237208990697444, -0.00317092609044664, -0.0220357926661759, -0.0316403844323702, -0.0323516549681369, -0.0259229323001955, -0.0150455694783870, -0.00276736988998017, 0.00810186019883348, 0.0154810723410739, 0.0183193119567121, 0.0166641024570767, 0.0115057291633226, 0.00444966461036306, -0.00269875179622970, -0.00834326582782533, -0.0114141940422433, -0.0115379271011759, -0.00903670392772155, -0.00477813455306256, 7.86933489181157e-05, 0.00437279979781281, 0.00720023204388804, 0.00808761405725037, 0.00705099076047847, 0.00453841009377828, 0.00128206905794384, -0.00189845177221457, -0.00429046739345002, -0.00543835511819774, -0.00521838363718635, -0.00383049307809523, -0.00171725839008339, 0.000563855222214475, 0.00248021246973904, 0.00364239734806314, 0.00387715551482204, 0.00324152388344852, 0.00198390865489729, 0.000465019738455002, -0.000937462997483424, -0.00191610032048575, -0.00229603863662214, -0.00205766058946591, -0.00132231893931153, -0.000307345326842995, 0.000735682823690446, 0.00158083238802428, 0.00207436050054433, 0.00216001102091789, 0.00187397061448153, 0.00132796367726536, 0.000667047405110743, 3.66604912860497e-05, -0.000451163152299852, -0.000736064282455291, -0.000812466880423842, -0.000719025526958223, -0.000883409403944260]


x_axis = numpy.arange(0, 255, 2).tolist()
plt.figure(figsize=(12, 6))

plt.plot(x_axis, filter)
plt.grid(visible=True, which='both', axis="both", color='#04D488', linestyle='--', linewidth=1)
plt.xlabel('Time [ms]')
plt.ylabel('Magnitude')
plt.xlim(0, 254)
plt.show()

filtered_signal = filtfilt(filter, 1, samples)

plt.figure(figsize=(12, 6))
plt.plot(samples, color="b", alpha=0.8)
plt.plot(filtered_signal, color="r", alpha=0.8)
plt.show()

X = fft(filtered_signal)
N = len(filtered_signal)
n = numpy.arange(N)
T = N / fs
freq = n / T

X2 = fft(samples)
N2 = len(samples)
n2 = numpy.arange(N)
T2 = N / fs
freq2 = n / T

plt.figure(figsize=(12, 6))
plt.plot(freq, numpy.abs(X),'b', alpha=0.8)
plt.plot(freq, numpy.abs(X2), 'r', alpha=0.8)
plt.xlabel('Freq (Hz)')
plt.ylabel('FFT Amplitude |X(freq)|')
plt.xlim(0, 100)
plt.show()

########################################################################################################################

# if 10e-1 == 1:
#     print("It works as expected! :-)")